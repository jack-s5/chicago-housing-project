---
title: "Chicago Housing Market Data Cleaning"
format: gfm
knitr:
  opts_knit: 
      root.dir: "~/Documents/R/chicago-housing-project"
---

### The Problem

I have a 5 gigabyte TSV file with a ton of housing data from neighborhoods all around the country (from Redfin, thanks Redfin). \n

I don't need this much data. \n

So we'll play around with this file to get it to be a simpler, more useful dataframe of Chicago's housing markets.

------------------------------------------------------------------------

First we'll load the necessary packages.

```{r}
#| label: Load Packages
#| message: FALSE
library(tidyverse)
library(data.table)
library(lubridate)
```

Then choose only a few columns and filter it to be just the results in Chicago.

```{r}
#| label: Slimming Original Data
#| message: false
#| results: hide

# just checking to see column names and values
fread("CSV/market-data.tsv000", nrows = 10) 

# take what we want
# mostly to make the file size not 5 gigs
reduced_original <- fread("CSV/market-data.tsv000", 
  select = c("period_begin", 
             "period_end", 
             "region",
             "city",
             "state",
             "property_type",
             "median_sale_price",
             "homes_sold",
             "new_listings",
             "inventory"))

# only need neighborhoods in Chicago
chicago_market_data <- reduced_original %>% 
  filter(city == "Chicago")
```

Next we'll get the neighborhood names by themselves and order our data by date.

```{r}
#| label: Data Cleaning
chicago_market_data_clean <- chicago_market_data

# drop the extra stuff in the region
chicago_market_data_clean$region <- str_replace_all(chicago_market_data$region, "Chicago, IL - ", "")

# get rid of unnecessary columns
chicago_market_data_clean <- chicago_market_data_clean %>% 
  select(-city, -state)

# order rows by date for easier future exploration
chicago_market_final <- chicago_market_data_clean %>% 
  mutate(period_begin = ymd(period_begin),
         period_end = ymd(period_end)) %>% 
  arrange(period_begin)
```

Finally we write it as a (much lighter) CSV for future use.

```{r}
#| label: Export Data
#| message: FALSE
write_csv(chicago_market_final, "CSV/chicago_housing-market-data.csv")
```
